variables:
  REGISTRY: "docker-hub.2gis.ru"

stages:
  - build
  - report
  - dockerize
  - deploy
  - end

before_script:
  - export APPLICATION=`make -s print-APPLICATION`
  - export CI_TAG=`[[ -z ${CI_COMMIT_TAG} ]] && echo "branch-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHA:0:8}" || echo "${CI_COMMIT_TAG}"`

# ================= Test & Build =================

build:app:
  image: $REGISTRY/microsoft/dotnet:2.1.400-sdk-alpine3.7
  stage: build
  when: always
  script:
    - dotnet restore --runtime ubuntu.16.04-x64
    - dotnet test tests/VStore.UnitTests/VStore.UnitTests.csproj --configuration Release /p:CollectCoverage=true /p:CoverletOutputFormat=lcov /p:CoverletOutput="`pwd`/coverage/"
    - dotnet publish src/VStore.Host --configuration Release --runtime ubuntu.16.04-x64 --output ../../publish/vstore
    - dotnet publish src/VStore.Worker --configuration Release --runtime ubuntu.16.04-x64 --output ../../publish/vstore-worker
    - dotnet restore --runtime alpine.3.7-x64
    - dotnet publish src/VStore.Renderer --configuration Release --runtime alpine.3.7-x64 --output ../../publish/vstore-renderer
  tags: [ 2gis, docker ]
  artifacts:
    name: "${CI_COMMIT_REF_NAME}_app"
    expire_in: '1 week'
    paths:
      - coverage/
      - publish/vstore/
      - publish/vstore-worker/
      - publish/vstore-renderer/

build:cloning-tool:
  image: $REGISTRY/microsoft/dotnet:2.1.400-sdk-alpine3.7
  stage: build
  when: manual
  script:
    - dotnet publish src/CloningTool --configuration Release --runtime ubuntu.16.04-x64 --output ../../publish/cloning-tool
  tags: [ 2gis, docker ]
  artifacts:
    name: "${CI_COMMIT_REF_NAME}_cloning_tool"
    expire_in: '1 week'
    paths:
      - publish/cloning-tool/

generate:coverage:
  image: $REGISTRY/2gis/alpine:3.7-lcov
  stage: report
  allow_failure: true
  script:
    - genhtml coverage/coverage.info --quiet --output-directory coverage_report
  dependencies:
    - build:app
  tags: [ 2gis, docker ]
  artifacts:
    name: "${CI_COMMIT_REF_NAME}_coverage_report"
    expire_in: '1 week'
    paths:
      - coverage_report/

build:vstore-host-image:
  stage: dockerize
  when: manual
  allow_failure: false
  script:
    - TAG=$CI_TAG DOCKER_FILE=publish/vstore/Dockerfile DOCKER_BUILD_CONTEXT=publish/vstore make docker-build
    - TAG=$CI_TAG make docker-push
  tags: [ docker-engine, io ]
  dependencies:
    - build:app

build:vstore-worker-image:
  stage: dockerize
  when: manual
  allow_failure: false
  script:
    - IMAGE=ams/vstore-worker TAG=$CI_TAG DOCKER_FILE=publish/vstore-worker/Dockerfile DOCKER_BUILD_CONTEXT=publish/vstore-worker make docker-build
    - IMAGE=ams/vstore-worker TAG=$CI_TAG make docker-push
  tags: [ docker-engine, io ]
  dependencies:
    - build:app
    
build:vstore-renderer-image:
  stage: dockerize
  when: manual
  allow_failure: false
  script:
    - IMAGE=ams/vstore-renderer TAG=$CI_TAG DOCKER_FILE=publish/vstore-renderer/Dockerfile DOCKER_BUILD_CONTEXT=publish/vstore-renderer make docker-build
    - IMAGE=ams/vstore-renderer TAG=$CI_TAG make docker-push
  tags: [ docker-engine, io ]
  dependencies:
    - build:app

build:cloning-tool-image:
  stage: dockerize
  when: manual
  script:
    - IMAGE=ams/cloning-tool TAG=$CI_TAG DOCKER_FILE=publish/cloning-tool/Dockerfile DOCKER_BUILD_CONTEXT=publish/cloning-tool make docker-build
    - IMAGE=ams/cloning-tool TAG=$CI_TAG make docker-push
  tags: [ docker-engine, io ]
  dependencies:
    - build:cloning-tool

# ================ Deploy =================

deploy:standalone:
  stage: deploy
  when: manual
  image: $REGISTRY/2gis-io/k8s-handle:latest
  script:
    - export VSTORE_ENVIRONMENT=Stage
    - k8s-handle deploy --config config-standalone.yaml --section vstore --sync-mode True
  only:
    - tags
  dependencies: []
  tags: [ 2gis, docker ]
  environment:
    name: vstore-standalone
    url: http://${CI_ENVIRONMENT_SLUG}.web-staging.2gis.ru/swagger

deploy:relizard:
  stage: deploy
  environment:
    name: staging
    url: http://vstore-stage.web-staging.2gis.ru/swagger
  only:
    - tags
  script:
    - "curl -X POST -F token=${AMS_DEPLOY_TRIGGER_TOKEN} -F ref=master https://gitlab.2gis.ru/api/v3/projects/2997/trigger/builds"
  dependencies: []
  tags: [ io, docker-engine ]

deploy:relizard:review:
  stage: deploy
  when: manual
  variables:
    GIT_STRATEGY: none
  environment:
    name: review/${CI_COMMIT_REF_SLUG}
    url: http://vstore-env-${CI_COMMIT_REF_SLUG}.web-staging.2gis.ru/swagger
    on_stop: destroy:relizard:stop-review
  only:
    - branches
  except:
    - master
  script:
    - 'export GECKO_PAYLOAD="{\"branch\":\"env/${CI_COMMIT_REF_SLUG}\",\"versions\":{\"vstore\":\"${CI_TAG}\"}}"'
    - 'curl -s -X POST http://relizard-gecko.web-staging.2gis.ru/envs -H "content-type: application/json" -d $GECKO_PAYLOAD --trace-ascii ${CI_PROJECT_DIR}/gecko_trace'
    - '_poll="curl -s -X GET http://relizard-gecko.web-staging.2gis.ru/envs/env/${CI_COMMIT_REF_SLUG}"'
    - 'export _elapsed=0'
    - 'echo ${CI_COMMIT_REF_SLUG:0:20} | sed -r "s/^(ams-[0-9]*)(.*)/\1/" | xargs -i printf "Environment will be ready on address:\n\033[0;32mhttp://vstore-{}.web-staging.2gis.ru/swagger\033[0m\n"'
    - 'while true; do sleep 5; let _elapsed=_elapsed+5; _status=$(${_poll} | python -c "import sys, json; print json.load(sys.stdin)[\"status\"]"); echo "Elapsed ${_elapsed}s, status: ${_status}"; case $_status in running) continue;; pending) continue;; success) exit 0;; *) exit 99;; esac; done'
  artifacts:
    name: "${CI_PROJECT_NAME}_${CI_COMMIT_SHA}"
    expire_in: '1 week'
    paths:
      - ${CI_PROJECT_DIR}/gecko_trace
  dependencies: []
  tags: [ io, docker-engine ]

destroy:relizard:stop-review:
  stage: deploy
  when: manual
  variables:
    GIT_STRATEGY: none
  environment:
    name: review/${CI_COMMIT_REF_SLUG}
    action: stop
  only:
    - branches
  except:
    - master
  script:
    - curl -s -X DELETE http://relizard-gecko.web-staging.2gis.ru/envs/env/${CI_COMMIT_REF_SLUG}
  dependencies: []
  tags: [ io, docker-engine ]

# ================= End =================

cleanup:registry:
  stage: end
  when: always
  script:
    - make docker-registry-images-cleanup TAG="branch-" TIME_LIFE_IMAGE=604800 # 7 days
    - make docker-registry-images-cleanup IMAGE=ams/vstore-worker TAG="branch-" TIME_LIFE_IMAGE=604800 # 7 days
    - make docker-registry-images-cleanup IMAGE=ams/vstore-renderer TAG="branch-" TIME_LIFE_IMAGE=604800 # 7 days
    - make docker-registry-images-cleanup IMAGE=ams/cloning-tool TAG="branch-" TIME_LIFE_IMAGE=604800 # 7 days
    - make docker-registry-images-cleanup IMAGE=ams/logo-migrator TAG="branch-" TIME_LIFE_IMAGE=604800 # 7 days
  dependencies: []
  tags: [ docker-engine, io ]

cleanup:runner:
  stage: end
  when: always
  script:
    - make docker-containers-cleanup
    - make docker-images-cleanup TAG="branch-" TIME_LIFE_IMAGE=86400 # 4 days
    - make docker-images-cleanup IMAGE=ams/vstore-worker TAG="branch-" TIME_LIFE_IMAGE=86400 # 1 day
    - make docker-images-cleanup IMAGE=ams/vstore-renderer TAG="branch-" TIME_LIFE_IMAGE=86400 # 1 day
    - make docker-images-cleanup IMAGE=ams/cloning-tool TAG="branch-" TIME_LIFE_IMAGE=86400 # 1 day
    - make docker-images-cleanup IMAGE=ams/logo-migrator TAG="branch-" TIME_LIFE_IMAGE=86400 # 1 day
  dependencies: []
  tags: [ docker-engine, io ]
